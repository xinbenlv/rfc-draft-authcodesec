Internet Engineering Task Force (IETF)              Zainan (Victor) Zhou
Internet-Draft                                                    Namefi
                                                           zzn@namefi.io
Intended status: Standards Track                             March 2025
Expires: September 4, 2025


       Prefixed TXT Records as Transition Mechanism for New RR Types
                     draft-zzn-dns-new-rr-00

Abstract

  This document specifies a transition mechanism for introducing new
  DNS Resource Record (RR) types using prefixed TXT records until the
  new RR types are widely deployed. The approach uses an "RFC<number>"
  prefix pattern inspired by W3C's vendor prefix approach in CSS,
  allowing for backward compatibility while new RR types propagate
  through DNS software and service providers. This mechanism ensures
  continuous functionality during the adoption phase of new RR types.

Status of This Memo

  This Internet-Draft is submitted in full conformance with the
  provisions of BCP 78 and BCP 79.

  Internet-Drafts are working documents of the Internet Engineering Task
  Force (IETF).  Note that other groups may also distribute working
  documents as Internet-Drafts.  The list of current Internet-Drafts is
  at https://datatracker.ietf.org/drafts/current/.

  Internet-Drafts are draft documents valid for a maximum of six months
  and may be updated, replaced, or obsoleted by other documents at any
  time.  It is inappropriate to use Internet-Drafts as reference
  material or to cite them other than as "work in progress."

  This Internet-Draft will expire on September 4, 2025.

Copyright Notice

  Copyright (c) 2025 IETF Trust and the persons identified as the
  document authors.  All rights reserved.

1. Introduction

  The DNS protocol [RFC1035] has a well-established process for
  introducing new Resource Record (RR) types through the IANA registry.
  However, the deployment of new RR types faces significant practical
  challenges:

  1. DNS software must be updated to recognize and handle the new RR type
  2. DNS service providers must update their management interfaces
  3. Authoritative server operators must deploy updated software
  4. Content management systems and domain control panels must be updated
  5. Recursive resolvers must properly handle the new RR type

  These challenges create a "chicken and egg" problem: implementers
  hesitate to use new RR types until they are widely supported, while
  DNS providers hesitate to support RR types until they are widely used.

  This document specifies a transition mechanism using prefixed TXT
  records to enable immediate deployment of new RR type functionality
  before universal support is available, while providing a clear
  migration path to the standardized RR type.

1.1. Requirements Notation

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
  "OPTIONAL" in this document are to be interpreted as described in
  BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
  capitals, as shown here.

2. Prefixed TXT Record Mechanism

2.1. Prefix Format and Usage

  The transition mechanism uses the following format for TXT records:

  RFC<number> <record-specific-data>

  Where:
  - "RFC<number>" is a placeholder referencing the RFC that defines
    the record format. During the draft phase, implementations MAY
    use "RFCdraft" or the draft name (e.g., "draft-example-new-record").
    Once an RFC number is assigned, "RFC<number>" MUST be used.
  
  - <record-specific-data> contains the data that will eventually
    move to the new RR type, formatted according to the RFC that 
    defines the record.

  Example TXT record for a hypothetical TRANSLATION RR type:
  example.com. IN TXT "RFC9999 en=Hello|es=Hola|fr=Bonjour"

2.2. Transition Process

  The transition process consists of four phases:

  1. Draft Phase:
     - The new RR type and its TXT fallback are defined in an Internet-Draft
     - Early implementers MAY use "RFCdraft" or draft name prefix
     - Example: "RFCdraft en=Hello|es=Hola|fr=Bonjour"

  2. RFC Assignment Phase:
     - Once an RFC number is assigned, implementations MUST update to use
       the specific RFC number
     - Example: "RFC9999 en=Hello|es=Hola|fr=Bonjour"

  3. Dual Deployment Phase:
     - Implementations SHOULD deploy both the prefixed TXT record AND
       the new RR type when it becomes available
     - Resolvers MUST prioritize the dedicated RR type over TXT records
     - Example: 
       example.com. IN TRANSLATION "en=Hello|es=Hola|fr=Bonjour"
       example.com. IN TXT "RFC9999 en=Hello|es=Hola|fr=Bonjour"

  4. Final Phase:
     - Once the new RR type is widely supported, prefixed TXT records
       MAY be discontinued
     - The RFC defining the RR type SHOULD specify a recommended
       timeframe for maintaining TXT record fallbacks

2.3. Implementation Requirements

  Clients and servers implementing this transition mechanism MUST:

  1. Look for both the new RR type and the prefixed TXT record
  2. Prioritize the new RR type when both are present
  3. Verify that the prefixed TXT record starts with "RFC<number> "
  4. Process the record content according to the referenced RFC

  Authoritative servers SHOULD:

  1. Support adding both the prefixed TXT record and the new RR type
  2. Provide tools to help zone administrators maintain consistency
     between the TXT fallback and the new RR type

3. Examples

3.1. WALLET Records for Cryptocurrency Addresses

  A cryptocurrency address resolution mechanism might be defined in
  a hypothetical RFC9999 for a WALLET RR type:

  ; During transition (both records present)
  example.com. IN WALLET "caip10:eip155:1:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb"
  example.com. IN TXT "RFC9999 caip10:eip155:1:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb"

  ; Final phase (only WALLET remains)
  example.com. IN WALLET "caip10:eip155:1:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb"

3.2. PUBKEY Records for OpenPGP Public Keys

  A public key distribution mechanism might be defined in a hypothetical
  RFC8888 for a PUBKEY RR type:

  ; During transition
  example.com. IN TXT "RFC8888 mDMEXazlfxYJKwYBBAHaRw8BAQdAHwNtpw7ZZMj..."
  example.com. IN PUBKEY "mDMEXazlfxYJKwYBBAHaRw8BAQdAHwNtpw7ZZMj..."

3.3. Chunked X509 Certificate Example

  A mechanism for distributing X.509 certificates might be defined in a
  hypothetical RFC7777 for a CERT RR type. Due to the large size of
  X.509 certificates, chunking is required when using TXT records:

  ; During transition (chunked TXT records)
  example.com. IN TXT "RFC7777 0/3 -----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgI"
  example.com. IN TXT "RFC7777 1/3 UEz12VnAc6VHi1QhMMCudOzIXY4BhQIDAQABo4ICZjCCAm"
  example.com. IN TXT "RFC7777 2/3 IwDQYJKoZIhvcNAQELBQAwgb8xCzA\n-----END CERTIFICATE-----"

  ; During transition (native RR type)
  example.com. IN CERT "-----BEGIN CERTIFICATE-----
  MIIFazCCA1OgAwIBAgIUEz12VnAc6VHi1QhMMCudOzIXY4BhQIDAQABo4ICZjCCAm
  IwDQYJKoZIhvcNAQELBQAwgb8xCzA
  -----END CERTIFICATE-----"

  ; Final phase (only CERT remains)
  example.com. IN CERT "-----BEGIN CERTIFICATE-----
  MIIFazCCA1OgAwIBAgIUEz12VnAc6VHi1QhMMCudOzIXY4BhQIDAQABo4ICZjCCAm
  IwDQYJKoZIhvcNAQELBQAwgb8xCzA
  -----END CERTIFICATE-----"

  Note that in this example, the data shown in the chunks is truncated for
  brevity. In a real implementation, each chunk would contain the maximum 
  amount of data possible within DNS record size constraints.

4. Record Processing

4.1. Priority Rules

  When both the new RR type and a prefixed TXT record exist for the 
  same data, implementations MUST:

  1. Prioritize the new RR type record over the prefixed TXT record
  2. Only fall back to the prefixed TXT record if the new RR type is
     not found or cannot be processed

  If multiple prefixed TXT records exist with the same prefix, 
  implementations SHOULD process them according to the rules defined
  in the RFC referenced by the prefix.

4.2. Validation Requirements

  For prefixed TXT records, implementations MUST:

  1. Validate that the record starts with the exact prefix string
     including the trailing space ("RFC<number> ")
  2. Process the remainder of the record according to the format
     defined in the referenced RFC
  3. Reject records that do not conform to the expected format

4.3. Chunking Mechanism

  DNS TXT records are limited to 255 bytes per string segment, and
  DNS responses have practical size limitations (typically 512 bytes
  for UDP without EDNS0). To accommodate larger datasets during the
  transition period, this section defines a standard chunking mechanism
  for prefixed TXT records.

4.3.1. Chunk Format

  Chunked prefixed TXT records MUST use the following format:

  "RFC<number> <chunk-id>/<total-chunks> <chunk-data>"

  Where:
  - "RFC<number>" is the standard prefix as defined in Section 2.1
  - <chunk-id> is a zero-based index of this chunk (0, 1, 2, etc.)
  - <total-chunks> is the total number of chunks in the complete record
  - <chunk-data> is the portion of record data contained in this chunk

  Example of a record split into three chunks:
  example.com. IN TXT "RFC9999 0/3 [first portion of data]"
  example.com. IN TXT "RFC9999 1/3 [second portion of data]"
  example.com. IN TXT "RFC9999 2/3 [third portion of data]"

  Records that do not contain the <chunk-id>/<total-chunks> pattern 
  MUST be treated as complete, non-chunked records. This allows for 
  backward compatibility and simpler implementations when chunking 
  is not required:

  ; Non-chunked record (no chunking indicator)
  example.com. IN TXT "RFC9999 [complete data]"

  ; Chunked record (with chunking indicator)
  example.com. IN TXT "RFC9999 0/1 [complete data]"

  These two examples are functionally equivalent, but the first is
  preferred for non-chunked data as it is more concise and avoids
  unnecessary reassembly processing.

4.3.2. Chunk Processing Requirements

  Implementations processing prefixed TXT records MUST first determine
  whether a record is chunked by checking for the presence of the 
  "<chunk-id>/<total-chunks>" pattern after the RFC prefix:

  1. If the pattern is not present, the record MUST be treated as a 
     complete, non-chunked record.
  2. If the pattern is present, the record MUST be treated as part of 
     a chunked data set.

  Implementations processing chunked records MUST:

  1. Identify all TXT records with the same "RFC<number>" prefix
  2. Group records by their chunk identifiers (<chunk-id>/<total-chunks>)
  3. Verify that all chunks from 0 to <total-chunks>-1 are present
  4. Verify that all chunks reference the same <total-chunks> value
  5. Reassemble the record data in ascending order of <chunk-id>
  6. Process the reassembled data according to the format defined in
     the referenced RFC

  Implementations MUST reject chunked data sets that:
  1. Have missing chunks
  2. Have inconsistent <total-chunks> values
  3. Have duplicate <chunk-id> values
  4. Otherwise fail validation requirements

4.3.3. Implementation Recommendations

  When implementing chunking:

  1. Record authors SHOULD keep chunks small enough to avoid UDP
     fragmentation (typically under 512 bytes including DNS overhead)
  2. If possible, record authors SHOULD prefer the use of multiple
     string segments within a single TXT record (as per [RFC7208])
     before resorting to multiple TXT records
  3. DNS server operators SHOULD ensure consistent TTL values across
     all chunks of the same record
  4. Implementations SHOULD implement a timeout mechanism for 
     reassembly to handle cases where some chunks might be missing
     or delayed

4.3.4. Interaction with Native RR Types

  When a new RR type is defined that supports larger record sizes
  than TXT records, the format should define how to represent the
  information in both forms:

  1. As chunked TXT records during transition
  2. As a single record in the native RR type

  The RFC defining the new RR type SHOULD specify whether the native
  RR type has its own chunking mechanism or supports larger data
  sizes inherently.

4.3.5. Compatibility with Existing Uses

  The optional nature of chunking (indicated by the presence or absence
  of the <chunk-id>/<total-chunks> pattern) ensures backward compatibility
  with:

  1. Existing implementations that use prefixed TXT records without chunking
  2. RFCs that define prefixed TXT records but don't need chunking
  3. Simple data that fits within a single TXT record

  This approach allows the chunking mechanism to be adopted incrementally
  by implementations, with chunking used only when needed for larger data
  sets, while maintaining a consistent prefix format across all uses.

5. Security Considerations

5.1. Data Integrity

  Using TXT records as a fallback mechanism creates potential 
  consistency issues if the TXT and new RR type records diverge.
  Zone administrators SHOULD implement processes to ensure both
  record types contain identical data.

5.2. DNSSEC Considerations

  Both the prefixed TXT records and the new RR type SHOULD be signed
  with DNSSEC when available. Implementations verifying DNSSEC MUST
  apply the same validation standards to both record types.

5.3. Record Size Limitations

  TXT records are limited to 255 characters per string segment,
  while some new RR types may have different size constraints.
  RFCs defining new RR types that use this transition mechanism
  SHOULD address how to handle size limitations during the 
  transition period.

5.4. Chunking Security Considerations

  The chunking mechanism introduces additional security considerations:

  1. Chunk Manipulation: Attackers might attempt to manipulate individual
     chunks to create invalid or malicious reassembled records. All
     implementations MUST validate the complete reassembled record
     using the validation criteria defined in the referenced RFC.

  2. Denial of Service: An attacker might attempt to create very large
     numbers of chunked records, causing resolvers to spend excessive
     resources on reassembly. Implementations SHOULD impose reasonable
     limits on:
     - The maximum number of chunks to reassemble (e.g., 20)
     - The maximum total size of reassembled data (e.g., 10KB)
     - The time spent waiting for missing chunks

  3. Inconsistency Attacks: An attacker with the ability to serve
     inconsistent responses might deliver different chunk content to
     different clients. DNSSEC signing of all TXT records is strongly
     RECOMMENDED when using chunking.

  4. Zone Transfer Implications: Chunking mechanisms may have implications
     for zone transfers, especially incremental transfers. Zone transfer
     mechanisms SHOULD ensure all chunks are transferred together to
     maintain consistency.

6. IANA Considerations

  This document has no IANA actions.

7. References

7.1. Normative References

  [RFC1034] Mockapetris, P., "Domain names - concepts and facilities",
            STD 13, RFC 1034, DOI 10.17487/RFC1034, November 1987.

  [RFC1035] Mockapetris, P., "Domain names - implementation and
            specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
            November 1987.

  [RFC2119] Bradner, S., "Key words for use in RFCs to Indicate
            Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/RFC2119,
            March 1997.

  [RFC3597] Gustafsson, A., "Handling of Unknown DNS Resource Record
            (RR) Types", RFC 3597, DOI 10.17487/RFC3597, September 2003.

  [RFC7208] Kitterman, S., "Sender Policy Framework (SPF) for Authorizing
            Use of Domains in Email, Version 1", RFC 7208, 
            DOI 10.17487/RFC7208, April 2014.

  [RFC8174] Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
            2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
            May 2017.

7.2. Informative References

  [W3C-VENDOR-PREFIXES] W3C, "CSS Vendor Prefixes", W3C Working Group Note,
            <https://www.w3.org/TR/CSS21/syndata.html#vendor-keywords>.
